#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging
import optparse
import os
import signal
import sys
import traceback
from time import sleep, time
from datetime import date

import xlrd
import xlsxwriter
from selenium.webdriver import Chrome, ChromeOptions
from post_shift_client import PostShiftClient
from russian_names import RussianNames

from pages import KaskoCalcPage
from elements import AVG


PAGE_LOAD_TIMEOUT = 300


logging.basicConfig(format=("%(asctime)s  %(levelname)-8s "
                            "%(module)-15s %(message)s"),
                    level=logging.DEBUG)
logging.getLogger(
    "selenium.webdriver.remote.remote_connection").setLevel(logging.WARNING)


def load(filename):
    logging.debug('Loading data from "%s"', filename)
    workbook = xlrd.open_workbook(filename)
    sheet = workbook.sheet_by_index(0)

    data = []
    if sheet.nrows > 1:
        for row in range(sheet.nrows)[1:]:
            data.append({
                "city": sheet.cell_value(row, 0),
                "car_brand": sheet.cell_value(row, 1),
                "car_model": sheet.cell_value(row, 2),
                "car_year": int(sheet.cell_value(row, 3)),
                "car_transmission_type": sheet.cell_value(row, 4),
                "is_credit_car": str(sheet.cell_value(row, 5)).lower() == "да",
                "car_autostart": str(sheet.cell_value(row, 6).lower()) == "да",
                "car_is_new": sheet.cell_value(row, 7),
                "car_mileage": sheet.cell_value(row, 8),
                "payment_method": sheet.cell_value(row, 9),
                "calculation_target": sheet.cell_value(row, 10),
                "car_start_using_date": sheet.cell_value(row, 11),
                "car_price": int(sheet.cell_value(row, 12)),
                "antitheft_system": sheet.cell_value(row, 13),
                "driver_age": str(
                    sheet.cell_value(row, 14)).split(';'),
                "driver_experience": str(
                    sheet.cell_value(row, 15)).split(';'),
                "driver_sex": str(
                    sheet.cell_value(row, 16)).split(';'),
                "driver_has_children": str(
                    sheet.cell_value(row, 17)).split(';'),
                "driver_is_married": str(
                    sheet.cell_value(row, 18)).split(';')
            })

    logging.debug('Data has been loaded (%d rows)', len(data))

    return data


def report(filename, results):
    logging.debug('Creating report ...')
    workbook_in = xlrd.open_workbook(filename)
    sheet_in = workbook_in.sheet_by_index(0)

    out = "%s.out.xls" % os.path.basename(filename).split('.')[0]
    workbook_out = xlsxwriter.Workbook(out)
    sheet_out = workbook_out.add_worksheet()

    for row in range(sheet_in.nrows):
        for col in range(sheet_in.ncols):
            sheet_out.write(row, col, sheet_in.cell_value(row, col))

        col = sheet_in.ncols
        if row < len(results):
            if not isinstance(results[row], list):
                sheet_out.write(row, col, results[row])
            else:
                for result in results[row]:
                    if not isinstance(result, tuple):   # new price
                        sheet_out.write(row, 12, result)
                    else:
                        total, description = result
                        sheet_out.write(row, col, total)
                        col += 1
                        sheet_out.write(row, col, description)
                        col += 1

    workbook_out.close()
    logging.debug('Report has been created: "%s"', out)


def calculate(params):
    logging.debug('Starting calculation: params => %s', params)

    result = None
    driver = None

    options = ChromeOptions()
#     options.add_argument('headless')
#     options.add_argument('window-size=1280x800')

    try:
        driver = Chrome(chrome_options=options)
        driver.maximize_window()
        logging.debug('Chrome started')

        driver.set_page_load_timeout(PAGE_LOAD_TIMEOUT)
        logging.debug('Set page_load_timeout=%d', PAGE_LOAD_TIMEOUT)

        logging.debug('Opening "%s"', KaskoCalcPage.URL)
        driver.get(KaskoCalcPage.URL)

        page = KaskoCalcPage(driver)

        if params["city"]:
            page.city = params["city"]
        else:
            page.city = "Москва"

        page.car_brand = params["car_brand"]

        year = date.today().year
        if params["car_year"] < year - 10:
            page.car_year = year - 10
        elif params["car_year"] > year:
            page.car_year = year
        else:
            page.car_year = params["car_year"]

        page.car_model = params["car_model"]
        page.car_transmission_type = params["car_transmission_type"]
        page.car_engine_type = AVG
        page.car_modification = AVG
        page.car_engine_model = AVG

        if params["car_is_new"] == "Новый":
            page.car_is_new = "Новый/куплен менее месяца назад"
        elif params["car_is_new"] == "С пробегом":
            page.car_is_new = "Неновый/куплен более месяца назад "

        page.antitheft_system = params["antitheft_system"]

        if params["car_autostart"]:
            page.car_autostart = "Установлен автозапуск"
        else:
            page.car_autostart = "Без автозапуска"

        if params["is_credit_car"]:
            page.is_credit_car = "Да. Выплачиваю кредит."
        else:
            page.is_credit_car = "Нет, не в кредите."

        for i in range(len(params["driver_age"])):
            if i > 0:
                page.add_driver.click()
            page.driver_age = params["driver_age"][i]
            page.driver_experience = params["driver_experience"][i]
            page.driver_sex = params["driver_sex"][i]
            page.driver_is_married = params["driver_is_married"][i]
            page.driver_has_children = params["driver_has_children"][i]

        page.car_mileage.enter_number(params["car_mileage"])
        page.payment_method = params["payment_method"]
        page.calculation_target = params["calculation_target"]

        try:
            page.car_start_using_date = params["car_start_using_date"]
            page.car_price = params["car_price"]
            sleep(1)
            actual_price = page.car_price.value.replace('\xa0', '')
        except:
            page.car_price2.enter_number(params["car_price"])
            sleep(1)
            actual_price = page.car_price2.value.replace('\xa0', '')

        page.calculate.move_to_self()
        page.calculate.click()

        try:
            page.client_name = RussianNames().get_person()
            page.client_email = PostShiftClient().email
            ts = str(int(time()))
            page.client_phone = "+7 (9%s) %s-%s-%s" % (
                ts[1:3], ts[3:6], ts[6:8], ts[8:10])
            page.calculate_continue.click()
        except:
            pass

        page.wait_for_calculate()

        result = [actual_price]
        variants = filter(lambda v: v["CoverTypeName"] == "Угон + ущерб",
                          page.variants.variants)
        for variant in variants:
            total = variant["PremiumSumNum"]
            franchise = variant["FranchInfo"]
            repair = variant["RepairTypeInfo"]
            info = ';'.join((
                variant["CoverTypeName"],
                "Франшиза: %s %s" % (franchise["FranchiseTypeName"],
                                     franchise["FranchiseValue"]),
                repair["RepairTypeName"]
            ))
            result.append((total, info))
    except:
        etype, value, tb = sys.exc_info()
        result = "%r" % value
        traceback.print_exception(etype, value, tb)
    finally:
        if driver is not None:
            driver.quit()

    logging.debug('Calculation has been finished. Result => %s', result)

    return result


stopped = False


def main():
    def sigint_handler(signum, frame):
        global stopped

        logging.info("Got signal: signum=%d, frame=%s", signum, frame)
        stopped = True

    signal.signal(signal.SIGINT, sigint_handler)

    parser = optparse.OptionParser(usage="%prog <file>")
    _, args = parser.parse_args()

    if len(args) < 1:
        parser.error("Invalid arguments")

    filename = args[0]

    if not os.path.exists(filename):
        parser.error("File '%s' not exists" % filename)

    results = ['']
    for data in load(filename):
        if stopped:
            break
        results.append(calculate(data))

    report(filename, results)


if __name__ == "__main__":
    main()
