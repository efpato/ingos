#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging
import optparse
import os
import signal
import sys
import traceback
from time import sleep

import xlrd
import xlsxwriter
from page_object import PageElement
from selenium.webdriver import Firefox

from pages import KaskoCalcPage

PageElement.TIMEOUT = 60
PAGE_LOAD_TIMEOUT = 60


logging.basicConfig(format=("%(asctime)s  %(levelname)-8s "
                            "%(module)-15s %(message)s"),
                    level=logging.DEBUG)
logging.getLogger(
    "selenium.webdriver.remote.remote_connection").setLevel(logging.WARNING)


def load(filename):
    logging.debug('Loading data from "%s"', filename)
    workbook = xlrd.open_workbook(filename)
    sheet = workbook.sheet_by_index(0)

    data = []
    if sheet.nrows > 1:
        for row in range(sheet.nrows)[1:]:
            data.append({
                "city": sheet.cell_value(row, 0),
                "car_brand": sheet.cell_value(row, 1),
                "car_model": sheet.cell_value(row, 2),
                "car_year": sheet.cell_value(row, 3),
                "car_transmission_type": sheet.cell_value(row, 4),
                "is_credit_car": sheet.cell_value(row, 5),
                "car_night_parking_type": sheet.cell_value(row, 6),
                "car_autostart": sheet.cell_value(row, 7),
                "car_is_new": sheet.cell_value(row, 8),
                "car_mileage": sheet.cell_value(row, 9),
                "car_using_start_date": sheet.cell_value(row, 10),
                "car_price": sheet.cell_value(row, 11),
                "antitheft": sheet.cell_value(row, 12),
                "insure_additional_equipment": sheet.cell_value(row, 13),
                "audio_equipment_sum": sheet.cell_value(row, 14),
                "other_equipment_sum": sheet.cell_value(row, 15),
                "multi_drive": sheet.cell_value(row, 16),
                "multi_drive_light": sheet.cell_value(row, 17),
                "driver_age": str(
                    sheet.cell_value(row, 18)).split(';'),
                "driver_experience_years": str(
                    sheet.cell_value(row, 19)).split(';'),
                "driver_sex": str(
                    sheet.cell_value(row, 20)).split(';'),
                "driver_has_children": str(
                    sheet.cell_value(row, 21)).split(';'),
                "driver_is_married": str(
                    sheet.cell_value(row, 22)).split(';'),
                "date_begin": sheet.cell_value(row, 23),
                "discount_sizepj": sheet.cell_value(row, 24)
            })

    logging.debug('Data has been loaded (%d rows)', len(data))

    return data


def report(filename, results):
    logging.debug('Creating report ...')
    workbook_in = xlrd.open_workbook(filename)
    sheet_in = workbook_in.sheet_by_index(0)

    out = "%s.out.xls" % os.path.basename(filename).split('.')[0]
    workbook_out = xlsxwriter.Workbook(out)
    sheet_out = workbook_out.add_worksheet()

    for row in range(sheet_in.nrows):
        for col in range(sheet_in.ncols):
            sheet_out.write(row, col, sheet_in.cell_value(row, col))

        col = sheet_in.ncols
        if row < len(results):
            if not isinstance(results[row], list):
                sheet_out.write(row, col, results[row])
            else:
                for result in results[row]:
                    if not isinstance(result, tuple):   # new price
                        sheet_out.write(row, 11, result)
                    else:
                        total, description = result
                        sheet_out.write(row, col, total)
                        col += 1
                        sheet_out.write(row, col, description)
                        col += 1

    workbook_out.close()
    logging.debug('Report has been created: "%s"', out)


def calculate(params):
    logging.debug('Starting calculation: params => %s', params)

    result = None
    driver = None

    try:
        driver = Firefox()
        driver.maximize_window()
        logging.debug('Firefox started')

        driver.set_page_load_timeout(PAGE_LOAD_TIMEOUT)
        logging.debug('Set page_load_timeout=%d', PAGE_LOAD_TIMEOUT)

        page = KaskoCalcPage(driver)
        logging.debug('Opening "%s"', KaskoCalcPage.URL)
        page.get(KaskoCalcPage.URL)

        if params["city"]:
            page.city(params["city"])
        else:
            page.city("Москва")

        sleep(3)    # Wait options load
        page.car_brand = params["car_brand"]
        page.car_year(params["car_year"])
        page.car_model(params["car_model"])
        page.car_engine_model()
        page.car_modification()
        page.car_transmission_type(params["car_transmission_type"])

        if params["car_is_new"]:
            if params["car_is_new"] == "Новый":
                page.car_is_new.click()
            elif params["car_is_new"] == "С пробегом":
                page.car_is_mileage.click()
                page.car_mileage = int(params["car_mileage"])

        page.car_using_start_date = params["car_using_start_date"]

        page.car_night_parking_type(params["car_night_parking_type"])
        page.is_credit_car(params["is_credit_car"])
        page.car_autostart(params["car_autostart"])

        actual_price = None
        if params["car_price"]:
            price = int(params["car_price"])
            min_price = page.car_min_price
            max_price = page.car_max_price
            if price < min_price:
                actual_price = min_price
            elif price > max_price:
                actual_price = max_price
            else:
                actual_price = price
            page.car_price = actual_price

        if params["antitheft"]:
            if params["antitheft"] == "Штатная":
                page.antitheft_included.click()
            else:
                page.antitheft_other.click()
                page.wait_hide_loader()
                page.antitheft_system_models = params["antitheft"]

        if params["insure_additional_equipment"] == "Да":
            page.insure_additional_equipment.click()
            page.audio_equipment_sum = int(params["audio_equipment_sum"])
            page.other_equipment_sum = int(params["other_equipment_sum"])

        if params["multi_drive"] == "Да":
            page.multi_drive.click()
        if params["multi_drive_light"] == "Да":
            page.multi_drive_light.click()
        if params["multi_drive"] != "Да" and \
                params["multi_drive_light"] != "Да":
            for i in range(len(params["driver_age"])):
                if i > 0:
                    page.add_usage_driver.click()
                page.driver_age(i, int(float(params["driver_age"][i])))
                page.driver_experience_years(
                    i, int(float(params["driver_experience_years"][i])))
                if params["driver_sex"][i] == "Мужской":
                    page.driver_sex_male(i).click()
                elif params["driver_sex"][i] == "Женский":
                    page.driver_sex_female(i).click()
                if params["driver_has_children"][i] == "Да":
                    page.driver_has_children_yes(i).click()
                elif params["driver_has_children"][i] == "Нет":
                    page.driver_has_children_no(i).click()
                if params["driver_is_married"][i] == "Да":
                    page.driver_is_married_yes(i).click()
                elif params["driver_is_married"][i] == "Нет":
                    page.driver_is_married_no(i).click()

        page.date_begin = params["date_begin"]

        if params["discount_sizepj"] == "Да":
            page.discount_sizepj.click()

        page.calculate.click()
        page.wait_calculation()

        if page.errors:
            result = page.errors
        else:
            result = []
            if actual_price is not None:
                result.append(actual_price)
            for variant in page.variants:
                if not variant.is_displayed():
                    page.next_variant()
                    sleep(3)
                variant.click()
                info = ';'.join((info.text for info in page.variant_info))
                if page.has_franchise:
                    info += ";Франшиза: %s" % page.franchise_value
                result.append((page.result, info))
    except:
        etype, value, tb = sys.exc_info()
        result = "%r" % value
        traceback.print_exception(etype, value, tb)
    finally:
        if driver is not None:
            driver.quit()

    logging.debug('Calculation has been finished. Result => %s', result)

    return result


stopped = False


def main():
    def sigint_handler(signum, frame):
        global stopped

        logging.info("Got signal: signum=%d, frame=%s", signum, frame)
        stopped = True

    signal.signal(signal.SIGINT, sigint_handler)

    parser = optparse.OptionParser(usage="%prog <file>")
    _, args = parser.parse_args()

    if len(args) < 1:
        parser.error("Invalid arguments")

    filename = args[0]

    if not os.path.exists(filename):
        parser.error("File '%s' not exists" % filename)

    results = ['']
    for data in load(filename):
        if stopped:
            break
        results.append(calculate(data))

    report(filename, results)


if __name__ == "__main__":
    main()
